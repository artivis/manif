<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structmanif_1_1_lie_group_base" kind="struct" language="C++" prot="public">
    <compoundname>manif::LieGroupBase</compoundname>
    <derivedcompoundref refid="structmanif_1_1_bundle_base" prot="public" virt="non-virtual">manif::BundleBase&lt; Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_bundle_base" prot="public" virt="non-virtual">manif::BundleBase&lt; Map&lt; manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_bundle_base" prot="public" virt="non-virtual">manif::BundleBase&lt; Bundle&lt; _Scalar, _T ... &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_rn_base" prot="public" virt="non-virtual">manif::RnBase&lt; Map&lt; const manif::Rn&lt; _Scalar, _N &gt;, 0 &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_rn_base" prot="public" virt="non-virtual">manif::RnBase&lt; Map&lt; manif::Rn&lt; _Scalar, _N &gt;, 0 &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_rn_base" prot="public" virt="non-virtual">manif::RnBase&lt; Rn&lt; _Scalar, _N &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_s_e2_base" prot="public" virt="non-virtual">manif::SE2Base&lt; SE2&lt; _Scalar &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_s_e2_base" prot="public" virt="non-virtual">manif::SE2Base&lt; Map&lt; manif::SE2&lt; _Scalar &gt;, 0 &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_s_e2_base" prot="public" virt="non-virtual">manif::SE2Base&lt; Map&lt; const manif::SE2&lt; _Scalar &gt;, 0 &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_s_e3_base" prot="public" virt="non-virtual">manif::SE3Base&lt; Map&lt; const manif::SE3&lt; _Scalar &gt;, 0 &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_s_e3_base" prot="public" virt="non-virtual">manif::SE3Base&lt; Map&lt; manif::SE3&lt; _Scalar &gt;, 0 &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_s_e3_base" prot="public" virt="non-virtual">manif::SE3Base&lt; SE3&lt; _Scalar &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_s_e__2__3_base" prot="public" virt="non-virtual">manif::SE_2_3Base&lt; SE_2_3&lt; _Scalar &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_s_e__2__3_base" prot="public" virt="non-virtual">manif::SE_2_3Base&lt; Map&lt; manif::SE_2_3&lt; _Scalar &gt;, 0 &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_s_e__2__3_base" prot="public" virt="non-virtual">manif::SE_2_3Base&lt; Map&lt; const manif::SE_2_3&lt; _Scalar &gt;, 0 &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_s_gal3_base" prot="public" virt="non-virtual">manif::SGal3Base&lt; Map&lt; const manif::SGal3&lt; _Scalar &gt;, 0 &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_s_gal3_base" prot="public" virt="non-virtual">manif::SGal3Base&lt; SGal3&lt; _Scalar &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_s_gal3_base" prot="public" virt="non-virtual">manif::SGal3Base&lt; Map&lt; manif::SGal3&lt; _Scalar &gt;, 0 &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_s_o2_base" prot="public" virt="non-virtual">manif::SO2Base&lt; SO2&lt; _Scalar &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_s_o2_base" prot="public" virt="non-virtual">manif::SO2Base&lt; Map&lt; manif::SO2&lt; _Scalar &gt;, 0 &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_s_o2_base" prot="public" virt="non-virtual">manif::SO2Base&lt; Map&lt; const manif::SO2&lt; _Scalar &gt;, 0 &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_s_o3_base" prot="public" virt="non-virtual">manif::SO3Base&lt; Map&lt; const manif::SO3&lt; _Scalar &gt;, 0 &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_s_o3_base" prot="public" virt="non-virtual">manif::SO3Base&lt; SO3&lt; _Scalar &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_s_o3_base" prot="public" virt="non-virtual">manif::SO3Base&lt; Map&lt; manif::SO3&lt; _Scalar &gt;, 0 &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_bundle_base" prot="public" virt="non-virtual">manif::BundleBase&lt; _Derived &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_rn_base" prot="public" virt="non-virtual">manif::RnBase&lt; _Derived &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_s_e2_base" prot="public" virt="non-virtual">manif::SE2Base&lt; _Derived &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_s_e3_base" prot="public" virt="non-virtual">manif::SE3Base&lt; _Derived &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_s_e__2__3_base" prot="public" virt="non-virtual">manif::SE_2_3Base&lt; _Derived &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_s_gal3_base" prot="public" virt="non-virtual">manif::SGal3Base&lt; _Derived &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_s_o2_base" prot="public" virt="non-virtual">manif::SO2Base&lt; _Derived &gt;</derivedcompoundref>
    <derivedcompoundref refid="structmanif_1_1_s_o3_base" prot="public" virt="non-virtual">manif::SO3Base&lt; _Derived &gt;</derivedcompoundref>
    <includes refid="lie__group__base_8h" local="no">lie_group_base.h</includes>
    <templateparamlist>
      <param>
        <type>class _Derived</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structmanif_1_1_lie_group_base_1a7215753f62eaeced0a3c8f53147938e3" prot="public" static="no">
        <type>typename <ref refid="structmanif_1_1internal_1_1traits" kindref="compound">internal::traits</ref>&lt; _Derived &gt;::Scalar</type>
        <definition>using manif::LieGroupBase&lt; _Derived &gt;::Scalar =  typename internal::traits&lt;_Derived&gt;::Scalar</definition>
        <argsstring></argsstring>
        <name>Scalar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="29" column="3" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structmanif_1_1_lie_group_base_1a1f015474f257f800bcd826787b26bcfc" prot="public" static="no">
        <type>typename <ref refid="structmanif_1_1internal_1_1traits" kindref="compound">internal::traits</ref>&lt; _Derived &gt;::LieGroup</type>
        <definition>using manif::LieGroupBase&lt; _Derived &gt;::LieGroup =  typename internal::traits&lt;_Derived&gt;::LieGroup</definition>
        <argsstring></argsstring>
        <name>LieGroup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="30" column="3" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structmanif_1_1_lie_group_base_1a59562d75de51334eab68426521a4e923" prot="public" static="no">
        <type>typename <ref refid="structmanif_1_1internal_1_1traits" kindref="compound">internal::traits</ref>&lt; _Derived &gt;::DataType</type>
        <definition>using manif::LieGroupBase&lt; _Derived &gt;::DataType =  typename internal::traits&lt;_Derived&gt;::DataType</definition>
        <argsstring></argsstring>
        <name>DataType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="31" column="3" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structmanif_1_1_lie_group_base_1ab920e7e67b4e174ad7e291cd10945827" prot="public" static="no">
        <type>typename <ref refid="structmanif_1_1internal_1_1traits" kindref="compound">internal::traits</ref>&lt; _Derived &gt;::Tangent</type>
        <definition>using manif::LieGroupBase&lt; _Derived &gt;::Tangent =  typename internal::traits&lt;_Derived&gt;::Tangent</definition>
        <argsstring></argsstring>
        <name>Tangent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="32" column="3" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structmanif_1_1_lie_group_base_1ac02491bfe309ff4a384ca4394f153d6c" prot="public" static="no">
        <type>typename <ref refid="structmanif_1_1internal_1_1traits" kindref="compound">internal::traits</ref>&lt; _Derived &gt;::Jacobian</type>
        <definition>using manif::LieGroupBase&lt; _Derived &gt;::Jacobian =  typename internal::traits&lt;_Derived&gt;::Jacobian</definition>
        <argsstring></argsstring>
        <name>Jacobian</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="33" column="3" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structmanif_1_1_lie_group_base_1aefcb523771afb5c59a70fb2d869598eb" prot="public" static="no">
        <type>typename <ref refid="structmanif_1_1internal_1_1traits" kindref="compound">internal::traits</ref>&lt; _Derived &gt;::Vector</type>
        <definition>using manif::LieGroupBase&lt; _Derived &gt;::Vector =  typename internal::traits&lt;_Derived&gt;::Vector</definition>
        <argsstring></argsstring>
        <name>Vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="34" column="3" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structmanif_1_1_lie_group_base_1a9e323b97f09981a2b0d1973f8d81b21b" prot="public" static="no">
        <type>tl::optional&lt; Eigen::Ref&lt; Jacobian &gt; &gt;</type>
        <definition>using manif::LieGroupBase&lt; _Derived &gt;::OptJacobianRef =  tl::optional&lt;Eigen::Ref&lt;Jacobian&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>OptJacobianRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="36" column="3" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structmanif_1_1_lie_group_base_1a536b5307a15fd40b0e5eb87c0344d6a8" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename _Scalar</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structmanif_1_1internal_1_1traitscast" kindref="compound">internal::traitscast</ref>&lt; LieGroup, _Scalar &gt;::<ref refid="structmanif_1_1_lie_group_base_1ad0db8fc1317d2ea0f6f210a6b274ec88" kindref="member">cast</ref></type>
        <definition>using manif::LieGroupBase&lt; _Derived &gt;::LieGroupTemplate =  typename internal::traitscast&lt;LieGroup, _Scalar&gt;::cast</definition>
        <argsstring></argsstring>
        <name>LieGroupTemplate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="39" column="3" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structmanif_1_1_lie_group_base_1a42a00de7f4c6ae7e8a11568dfd4a43a8" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int manif::LieGroupBase&lt; _Derived &gt;::Dim</definition>
        <argsstring></argsstring>
        <name>Dim</name>
        <initializer>= <ref refid="structmanif_1_1internal_1_1traits" kindref="compound">internal::traits</ref>&lt;_Derived&gt;::Dim</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="25" column="24" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmanif_1_1_lie_group_base_1a613898f9799c5317567b33a1fabe726e" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int manif::LieGroupBase&lt; _Derived &gt;::DoF</definition>
        <argsstring></argsstring>
        <name>DoF</name>
        <initializer>= <ref refid="structmanif_1_1internal_1_1traits" kindref="compound">internal::traits</ref>&lt;_Derived&gt;::DoF</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="26" column="24" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmanif_1_1_lie_group_base_1a229272dd86ff795a11848855b7072b20" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int manif::LieGroupBase&lt; _Derived &gt;::RepSize</definition>
        <argsstring></argsstring>
        <name>RepSize</name>
        <initializer>= <ref refid="structmanif_1_1internal_1_1traits" kindref="compound">internal::traits</ref>&lt;_Derived&gt;::RepSize</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="27" column="24" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmanif_1_1_lie_group_base_1a7fe44175f7ad70476c640d4745d7c6c9" prot="public" static="yes" mutable="no">
        <type>const OptJacobianRef</type>
        <definition>const LieGroupBase&lt; _Derived &gt;::OptJacobianRef manif::LieGroupBase&lt; _Derived &gt;::_</definition>
        <argsstring></argsstring>
        <name>_</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Helper for skipping an optional parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="44" column="31" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1ac411dc1b8a4456a3bae4afd152abddaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Derived &amp;</type>
        <definition>_Derived &amp; manif::LieGroupBase&lt; _Derived &gt;::operator=</definition>
        <argsstring>(const LieGroupBase &amp;m)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structmanif_1_1_lie_group_base" kindref="compound">LieGroupBase</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">An</parametername>
</parameternamelist>
<parameterdescription>
<para>element of the Lie group. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to this. </para>
</simplesect>
<simplesect kind="note"><para>This is a special case of the templated operator=. Its purpose is to prevent a default operator= from hiding the templated operator=. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="59" column="12" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="359" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1ab3b5b3153e4d50982f9f71d104c8c37f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _DerivedOther</type>
          </param>
        </templateparamlist>
        <type>_Derived &amp;</type>
        <definition>_Derived &amp; manif::LieGroupBase&lt; _Derived &gt;::operator=</definition>
        <argsstring>(const LieGroupBase&lt; _DerivedOther &gt; &amp;m)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structmanif_1_1_lie_group_base" kindref="compound">LieGroupBase</ref>&lt; _DerivedOther &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">An</parametername>
</parameternamelist>
<parameterdescription>
<para>element of the Lie group. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to this. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="67" column="12" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="368" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1a2b270c001e289786a499d76d886a5869" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _EigenDerived</type>
          </param>
        </templateparamlist>
        <type>_Derived &amp;</type>
        <definition>_Derived &amp; manif::LieGroupBase&lt; _Derived &gt;::operator=</definition>
        <argsstring>(const Eigen::MatrixBase&lt; _EigenDerived &gt; &amp;data)</argsstring>
        <name>operator=</name>
        <param>
          <type>const Eigen::MatrixBase&lt; _EigenDerived &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Assignment operator given Eigen object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">An</parametername>
</parameternamelist>
<parameterdescription>
<para>element of the Lie group. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to this. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="75" column="12" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="377" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1a1ac9dd89b140080b8b0284c8bdfb5270" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DataType &amp;</type>
        <definition>LieGroupBase&lt; _Derived &gt;::DataType &amp; manif::LieGroupBase&lt; _Derived &gt;::coeffs</definition>
        <argsstring>()</argsstring>
        <name>coeffs</name>
        <briefdescription>
<para>Access the underlying data by const reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="78" column="12" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="388" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1acee62f2ce8024b20db04c304031af85e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const DataType &amp;</type>
        <definition>const LieGroupBase&lt; _Derived &gt;::DataType &amp; manif::LieGroupBase&lt; _Derived &gt;::coeffs</definition>
        <argsstring>() const</argsstring>
        <name>coeffs</name>
        <briefdescription>
<para>Access the underlying data by const reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="81" column="18" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="395" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1a7d766d75afce68d88e7b83108b1bde3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Scalar *</type>
        <definition>LieGroupBase&lt; _Derived &gt;::Scalar * manif::LieGroupBase&lt; _Derived &gt;::data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <briefdescription>
<para>Access the underlying data by pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="84" column="10" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="402" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1a58250b5749c58fe57a7ecd14c4009dd0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Scalar *</type>
        <definition>const LieGroupBase&lt; _Derived &gt;::Scalar * manif::LieGroupBase&lt; _Derived &gt;::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
<para>Access the underlying data by const pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="86" column="16" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="409" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1ad0db8fc1317d2ea0f6f210a6b274ec88" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class _NewScalar</type>
          </param>
        </templateparamlist>
        <type>LieGroupTemplate&lt; _NewScalar &gt;</type>
        <definition>LieGroupTemplate&lt;_NewScalar&gt; manif::LieGroupBase&lt; _Derived &gt;::cast</definition>
        <argsstring>() const</argsstring>
        <name>cast</name>
        <briefdescription>
<para>Cast the LieGroup object to a copy of a different scalar type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="91" column="20"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1aa154961cb80b013d3d1d66132e487f33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Derived &amp;</type>
        <definition>_Derived &amp; manif::LieGroupBase&lt; _Derived &gt;::setIdentity</definition>
        <argsstring>()</argsstring>
        <name>setIdentity</name>
        <briefdescription>
<para>Set the LieGroup object this to Identity. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A reference to this. </para>
</simplesect>
<simplesect kind="see"><para>Eq. (2). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="103" column="12" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="426" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1a3d9dc0ea239fa48ca9d75d11e08e020d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Derived &amp;</type>
        <definition>_Derived &amp; manif::LieGroupBase&lt; _Derived &gt;::setRandom</definition>
        <argsstring>()</argsstring>
        <name>setRandom</name>
        <briefdescription>
<para>Set the LieGroup object this to a random value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A reference to this. </para>
</simplesect>
<simplesect kind="note"><para>Randomization happens in the tangent space so that M = Log(tau.random) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="111" column="12" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="435" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1a5b9c88987e97efb4ded4e1ceca236b46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>LieGroup</type>
        <definition>LieGroupBase&lt; _Derived &gt;::LieGroup manif::LieGroupBase&lt; _Derived &gt;::inverse</definition>
        <argsstring>(OptJacobianRef J_m_t={}) const</argsstring>
        <name>inverse</name>
        <param>
          <type>OptJacobianRef</type>
          <declname>J_m_t</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get the inverse of the LieGroup object this. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">-optional-</parametername>
</parameternamelist>
<parameterdescription>
<para>J_m_t Jacobian of the inverse wrt this. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Inverse of this. </para>
</simplesect>
<simplesect kind="note"><para>See Eq. (3). </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structmanif_1_1_tangent_base" kindref="compound">TangentBase</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="123" column="12" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="446" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1a27c13e0e833debe4c1b28a1dee828032" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Tangent</type>
        <definition>LieGroupBase&lt; _Derived &gt;::Tangent manif::LieGroupBase&lt; _Derived &gt;::log</definition>
        <argsstring>(OptJacobianRef J_t_m={}) const</argsstring>
        <name>log</name>
        <param>
          <type>OptJacobianRef</type>
          <declname>J_t_m</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get the corresponding Lie algebra element in vector form. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">-optional-</parametername>
</parameternamelist>
<parameterdescription>
<para>J_t_m Jacobian of the tangent wrt this. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The tangent element in vector form. </para>
</simplesect>
<simplesect kind="note"><para>This is the <ref refid="structmanif_1_1_lie_group_base_1a27c13e0e833debe4c1b28a1dee828032" kindref="member">log()</ref> map in vector form. </para>
</simplesect>
<simplesect kind="see"><para>Eq. (24). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="132" column="11" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="561" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1ae6ff30b30fc54178a527e1190a38ce3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>MANIF_DEPRECATED Tangent</type>
        <definition>LieGroupBase&lt; _Derived &gt;::Tangent manif::LieGroupBase&lt; _Derived &gt;::lift</definition>
        <argsstring>(OptJacobianRef J_t_m={}) const</argsstring>
        <name>lift</name>
        <param>
          <type>OptJacobianRef</type>
          <declname>J_t_m</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>This function is deprecated. Please considere using <ref refid="structmanif_1_1_lie_group_base_1a27c13e0e833debe4c1b28a1dee828032" kindref="member">log</ref> instead. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="140" column="11" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="568" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1aeb8cc8385a9e89c815c749ebfd3c7f14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _DerivedOther</type>
          </param>
        </templateparamlist>
        <type>LieGroup</type>
        <definition>LieGroupBase&lt; _Derived &gt;::LieGroup manif::LieGroupBase&lt; _Derived &gt;::compose</definition>
        <argsstring>(const LieGroupBase&lt; _DerivedOther &gt; &amp;m, OptJacobianRef J_mc_ma={}, OptJacobianRef J_mc_mb={}) const</argsstring>
        <name>compose</name>
        <param>
          <type>const <ref refid="structmanif_1_1_lie_group_base" kindref="compound">LieGroupBase</ref>&lt; _DerivedOther &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>OptJacobianRef</type>
          <declname>J_mc_ma</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>OptJacobianRef</type>
          <declname>J_mc_mb</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Composition of this and another element of the same Lie group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">m</parametername>
</parameternamelist>
<parameterdescription>
<para>Another element of the same Lie group. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">-optional-</parametername>
</parameternamelist>
<parameterdescription>
<para>J_mc_ma Jacobian of the composition wrt this. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">-optional-</parametername>
</parameternamelist>
<parameterdescription>
<para>J_mc_mb Jacobian of the composition wrt m. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The composition of &apos;this . m&apos;. </para>
</simplesect>
<simplesect kind="note"><para>See Eqs. (1,2,3,4). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="151" column="12" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="576" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1adc60eaf39fd497125f94e7b437f5d86f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _EigenDerived</type>
          </param>
        </templateparamlist>
        <type>Vector</type>
        <definition>LieGroupBase&lt; _Derived &gt;::Vector manif::LieGroupBase&lt; _Derived &gt;::act</definition>
        <argsstring>(const Eigen::MatrixBase&lt; _EigenDerived &gt; &amp;v, tl::optional&lt; Eigen::Ref&lt; Eigen::Matrix&lt; Scalar, Dim, DoF &gt;&gt;&gt; J_vout_m={}, tl::optional&lt; Eigen::Ref&lt; Eigen::Matrix&lt; Scalar, Dim, Dim &gt;&gt;&gt; J_vout_v={}) const</argsstring>
        <name>act</name>
        <param>
          <type>const Eigen::MatrixBase&lt; _EigenDerived &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>tl::optional&lt; Eigen::Ref&lt; Eigen::Matrix&lt; Scalar, Dim, DoF &gt;&gt;&gt;</type>
          <declname>J_vout_m</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>tl::optional&lt; Eigen::Ref&lt; Eigen::Matrix&lt; Scalar, Dim, Dim &gt;&gt;&gt;</type>
          <declname>J_vout_v</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get the action of the Lie group object on a point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">v</parametername>
</parameternamelist>
<parameterdescription>
<para>A point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">-optional-</parametername>
</parameternamelist>
<parameterdescription>
<para>J_vout_m Jacobian of the new object wrt this. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">-optional-</parametername>
</parameternamelist>
<parameterdescription>
<para>J_vout_v Jacobian of the new object wrt input object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A point acted upon by the object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="163" column="10" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="625" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1a7eee19e807f43489efd4601a8727e9a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Jacobian</type>
        <definition>LieGroupBase&lt; _Derived &gt;::Jacobian manif::LieGroupBase&lt; _Derived &gt;::adj</definition>
        <argsstring>() const</argsstring>
        <name>adj</name>
        <briefdescription>
<para>Get the Adjoint of the Lie group element this. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>See Eq. (29). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="171" column="12" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="617" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1a2a36d6106e38cd7fac46510e6458a119" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _DerivedOther</type>
          </param>
        </templateparamlist>
        <type>LieGroup</type>
        <definition>LieGroupBase&lt; _Derived &gt;::LieGroup manif::LieGroupBase&lt; _Derived &gt;::rplus</definition>
        <argsstring>(const TangentBase&lt; _DerivedOther &gt; &amp;t, OptJacobianRef J_mout_m={}, OptJacobianRef J_mout_t={}) const</argsstring>
        <name>rplus</name>
        <param>
          <type>const <ref refid="structmanif_1_1_tangent_base" kindref="compound">TangentBase</ref>&lt; _DerivedOther &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>OptJacobianRef</type>
          <declname>J_mout_m</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>OptJacobianRef</type>
          <declname>J_mout_t</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Right oplus operation of the Lie group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para>An element of the tangent of the Lie group. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">-optional-</parametername>
</parameternamelist>
<parameterdescription>
<para>J_mout_m Jacobian of the oplus operation wrt this. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">-optional-</parametername>
</parameternamelist>
<parameterdescription>
<para>J_mout_t Jacobian of the oplus operation wrt the tangent element. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An element of the Lie group. </para>
</simplesect>
<simplesect kind="note"><para>See Eq. (25). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="184" column="12" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="454" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1ad6af777d6c8914c59ce88a76db6f4775" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _DerivedOther</type>
          </param>
        </templateparamlist>
        <type>LieGroup</type>
        <definition>LieGroupBase&lt; _Derived &gt;::LieGroup manif::LieGroupBase&lt; _Derived &gt;::lplus</definition>
        <argsstring>(const TangentBase&lt; _DerivedOther &gt; &amp;t, OptJacobianRef J_mout_m={}, OptJacobianRef J_mout_t={}) const</argsstring>
        <name>lplus</name>
        <param>
          <type>const <ref refid="structmanif_1_1_tangent_base" kindref="compound">TangentBase</ref>&lt; _DerivedOther &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>OptJacobianRef</type>
          <declname>J_mout_m</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>OptJacobianRef</type>
          <declname>J_mout_t</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Left oplus operation of the Lie group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para>An element of the tangent of the Lie group. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">-optional-</parametername>
</parameternamelist>
<parameterdescription>
<para>J_mout_m Jacobian of the oplus operation wrt this. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">-optional-</parametername>
</parameternamelist>
<parameterdescription>
<para>J_mout_t Jacobian of the oplus operation wrt the tangent element. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An element of the Lie group. </para>
</simplesect>
<simplesect kind="note"><para>See Eq. (27). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="197" column="12" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="470" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1a74d5760f793fbfdeec248b34b3360d1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _DerivedOther</type>
          </param>
        </templateparamlist>
        <type>LieGroup</type>
        <definition>LieGroupBase&lt; _Derived &gt;::LieGroup manif::LieGroupBase&lt; _Derived &gt;::plus</definition>
        <argsstring>(const TangentBase&lt; _DerivedOther &gt; &amp;t, OptJacobianRef J_mout_m={}, OptJacobianRef J_mout_t={}) const</argsstring>
        <name>plus</name>
        <param>
          <type>const <ref refid="structmanif_1_1_tangent_base" kindref="compound">TangentBase</ref>&lt; _DerivedOther &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>OptJacobianRef</type>
          <declname>J_mout_m</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>OptJacobianRef</type>
          <declname>J_mout_t</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>An alias for the right oplus operation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structmanif_1_1_lie_group_base_1a2a36d6106e38cd7fac46510e6458a119" kindref="member">rplus</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="206" column="12" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="491" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1ad6c5f9dc430ca6b0ff1eb5cc58c9faed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _DerivedOther</type>
          </param>
        </templateparamlist>
        <type>Tangent</type>
        <definition>LieGroupBase&lt; _Derived &gt;::Tangent manif::LieGroupBase&lt; _Derived &gt;::rminus</definition>
        <argsstring>(const LieGroupBase&lt; _DerivedOther &gt; &amp;m, OptJacobianRef J_t_ma={}, OptJacobianRef J_t_mb={}) const</argsstring>
        <name>rminus</name>
        <param>
          <type>const <ref refid="structmanif_1_1_lie_group_base" kindref="compound">LieGroupBase</ref>&lt; _DerivedOther &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>OptJacobianRef</type>
          <declname>J_t_ma</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>OptJacobianRef</type>
          <declname>J_t_mb</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Right ominus operation of the Lie group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">m</parametername>
</parameternamelist>
<parameterdescription>
<para>Another element of the same Lie group. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">-optional-</parametername>
</parameternamelist>
<parameterdescription>
<para>J_t_ma Jacobian of the ominus operation wrt this. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">-optional-</parametername>
</parameternamelist>
<parameterdescription>
<para>J_t_mb Jacobian of the ominus operation wrt the other element. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An element of the tangent space of the Lie group. </para>
</simplesect>
<simplesect kind="note"><para>See Eq. (26). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="219" column="11" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="502" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1aef8d336d81a657e541e5ff48e5a08b1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _DerivedOther</type>
          </param>
        </templateparamlist>
        <type>Tangent</type>
        <definition>LieGroupBase&lt; _Derived &gt;::Tangent manif::LieGroupBase&lt; _Derived &gt;::lminus</definition>
        <argsstring>(const LieGroupBase&lt; _DerivedOther &gt; &amp;m, OptJacobianRef J_t_ma={}, OptJacobianRef J_t_mb={}) const</argsstring>
        <name>lminus</name>
        <param>
          <type>const <ref refid="structmanif_1_1_lie_group_base" kindref="compound">LieGroupBase</ref>&lt; _DerivedOther &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>OptJacobianRef</type>
          <declname>J_t_ma</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>OptJacobianRef</type>
          <declname>J_t_mb</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Left ominus operation of the Lie group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">m</parametername>
</parameternamelist>
<parameterdescription>
<para>Another element of the same Lie group. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">-optional-</parametername>
</parameternamelist>
<parameterdescription>
<para>J_t_ma Jacobian of the ominus operation wrt this. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">-optional-</parametername>
</parameternamelist>
<parameterdescription>
<para>J_t_mb Jacobian of the ominus operation wrt the other element. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An element of the tangent space of the Lie group. </para>
</simplesect>
<simplesect kind="note"><para>See Eq. (28). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="232" column="11" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="524" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1a3912f9ef389576c9038ce2d544b4b833" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _DerivedOther</type>
          </param>
        </templateparamlist>
        <type>Tangent</type>
        <definition>LieGroupBase&lt; _Derived &gt;::Tangent manif::LieGroupBase&lt; _Derived &gt;::minus</definition>
        <argsstring>(const LieGroupBase&lt; _DerivedOther &gt; &amp;m, OptJacobianRef J_t_ma={}, OptJacobianRef J_t_mb={}) const</argsstring>
        <name>minus</name>
        <param>
          <type>const <ref refid="structmanif_1_1_lie_group_base" kindref="compound">LieGroupBase</ref>&lt; _DerivedOther &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>OptJacobianRef</type>
          <declname>J_t_ma</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>OptJacobianRef</type>
          <declname>J_t_mb</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>An alias for the right ominus operation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structmanif_1_1_lie_group_base_1ad6c5f9dc430ca6b0ff1eb5cc58c9faed" kindref="member">rminus</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="241" column="11" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="551" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1a7351c9a0e8fe51c72978626efa12d97c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _DerivedOther</type>
          </param>
        </templateparamlist>
        <type>LieGroup</type>
        <definition>LieGroupBase&lt; _Derived &gt;::LieGroup manif::LieGroupBase&lt; _Derived &gt;::between</definition>
        <argsstring>(const LieGroupBase&lt; _DerivedOther &gt; &amp;m, OptJacobianRef J_mc_ma={}, OptJacobianRef J_mc_mb={}) const</argsstring>
        <name>between</name>
        <param>
          <type>const <ref refid="structmanif_1_1_lie_group_base" kindref="compound">LieGroupBase</ref>&lt; _DerivedOther &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>OptJacobianRef</type>
          <declname>J_mc_ma</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>OptJacobianRef</type>
          <declname>J_mc_mb</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">m</parametername>
</parameternamelist>
<parameterdescription>
<para>[description] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">-optional-</parametername>
</parameternamelist>
<parameterdescription>
<para>J_mc_ma [description] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">-optional-</parametername>
</parameternamelist>
<parameterdescription>
<para>J_mc_mb [description] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>[description] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="253" column="12" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="587" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1ac4d00c4834b1415eef9fb7a14dc8f708" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _DerivedOther</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool manif::LieGroupBase&lt; _Derived &gt;::isApprox</definition>
        <argsstring>(const LieGroupBase&lt; _DerivedOther &gt; &amp;m, const Scalar eps=Constants&lt; Scalar &gt;::eps) const</argsstring>
        <name>isApprox</name>
        <param>
          <type>const <ref refid="structmanif_1_1_lie_group_base" kindref="compound">LieGroupBase</ref>&lt; _DerivedOther &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const Scalar</type>
          <declname>eps</declname>
          <defval><ref refid="structmanif_1_1_constants" kindref="compound">Constants</ref>&lt; Scalar &gt;::eps</defval>
        </param>
        <briefdescription>
<para>Evaluate whether this and m are &apos;close&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">m</parametername>
</parameternamelist>
<parameterdescription>
<para>An element of the same Lie Group. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">eps</parametername>
</parameternamelist>
<parameterdescription>
<para>Threshold for equality comparison. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the Lie group element m is &apos;close&apos; to this, false otherwise. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structmanif_1_1_tangent_base_1a09d1ca10487c6c7cc43ff456a1664b65" kindref="member">TangentBase::isApprox</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="266" column="8" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="609" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1a5d68ac830a6191abb32eccc874612bef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _DerivedOther</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool manif::LieGroupBase&lt; _Derived &gt;::operator==</definition>
        <argsstring>(const LieGroupBase&lt; _DerivedOther &gt; &amp;m) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structmanif_1_1_lie_group_base" kindref="compound">LieGroupBase</ref>&lt; _DerivedOther &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Equality operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">An</parametername>
</parameternamelist>
<parameterdescription>
<para>element of the same Lie group. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the Lie group element m is &apos;close&apos; to this, false otherwise. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structmanif_1_1_lie_group_base_1ac4d00c4834b1415eef9fb7a14dc8f708" kindref="member">isApprox</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="279" column="8" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="638" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1a1a497184154ab95cc4cc4d14eb07c513" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _DerivedOther</type>
          </param>
        </templateparamlist>
        <type>LieGroup</type>
        <definition>LieGroupBase&lt; _Derived &gt;::LieGroup manif::LieGroupBase&lt; _Derived &gt;::operator+</definition>
        <argsstring>(const TangentBase&lt; _DerivedOther &gt; &amp;t) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structmanif_1_1_tangent_base" kindref="compound">TangentBase</ref>&lt; _DerivedOther &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Right oplus operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structmanif_1_1_lie_group_base_1a2a36d6106e38cd7fac46510e6458a119" kindref="member">rplus</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="286" column="12" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="647" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1a2a3e11651c59644d8f5f3705d0b257de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _DerivedOther</type>
          </param>
        </templateparamlist>
        <type>_Derived &amp;</type>
        <definition>_Derived &amp; manif::LieGroupBase&lt; _Derived &gt;::operator+=</definition>
        <argsstring>(const TangentBase&lt; _DerivedOther &gt; &amp;t)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="structmanif_1_1_tangent_base" kindref="compound">TangentBase</ref>&lt; _DerivedOther &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Right in-place oplus operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structmanif_1_1_lie_group_base_1a2a36d6106e38cd7fac46510e6458a119" kindref="member">rplus</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="293" column="12" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="656" bodyend="661"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1af59dd9dc829de8f8f49ecf4bee27fedd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _DerivedOther</type>
          </param>
        </templateparamlist>
        <type>Tangent</type>
        <definition>LieGroupBase&lt; _Derived &gt;::Tangent manif::LieGroupBase&lt; _Derived &gt;::operator-</definition>
        <argsstring>(const LieGroupBase&lt; _DerivedOther &gt; &amp;m) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structmanif_1_1_lie_group_base" kindref="compound">LieGroupBase</ref>&lt; _DerivedOther &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Right ominus operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structmanif_1_1_lie_group_base_1ad6c5f9dc430ca6b0ff1eb5cc58c9faed" kindref="member">rminus</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="300" column="11" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="666" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1a4e49d3cf3538e03ff7d19c1602da19cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _DerivedOther</type>
          </param>
        </templateparamlist>
        <type>LieGroup</type>
        <definition>LieGroupBase&lt; _Derived &gt;::LieGroup manif::LieGroupBase&lt; _Derived &gt;::operator*</definition>
        <argsstring>(const LieGroupBase&lt; _DerivedOther &gt; &amp;m) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structmanif_1_1_lie_group_base" kindref="compound">LieGroupBase</ref>&lt; _DerivedOther &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Lie group composition operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structmanif_1_1_lie_group_base_1aeb8cc8385a9e89c815c749ebfd3c7f14" kindref="member">compose</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="307" column="12" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="675" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1a019031c758bfb21a7030cd97843d4b4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _DerivedOther</type>
          </param>
        </templateparamlist>
        <type>_Derived &amp;</type>
        <definition>_Derived &amp; manif::LieGroupBase&lt; _Derived &gt;::operator*=</definition>
        <argsstring>(const LieGroupBase&lt; _DerivedOther &gt; &amp;m)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="structmanif_1_1_lie_group_base" kindref="compound">LieGroupBase</ref>&lt; _DerivedOther &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Lie group in-place composition operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structmanif_1_1_lie_group_base_1aeb8cc8385a9e89c815c749ebfd3c7f14" kindref="member">compose</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="314" column="12" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="684" bodyend="689"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1a7eb3084333fc8887e2fca17484eb8b81" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto manif::LieGroupBase&lt; _Derived &gt;::operator[]</definition>
        <argsstring>(const unsigned int i) const -&gt; decltype(coeffs()[i])</argsstring>
        <name>operator[]</name>
        <param>
          <type>const unsigned int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Access the ith coeffs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="317" column="8" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="317" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1ad6e624bd8270cec712a65f215d361b92" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto manif::LieGroupBase&lt; _Derived &gt;::operator[]</definition>
        <argsstring>(const unsigned int i) -&gt; decltype(coeffs()[i])</argsstring>
        <name>operator[]</name>
        <param>
          <type>const unsigned int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Access the ith coeffs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="322" column="8" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="322" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1a87b9295ceffbca507f4a056a20260fc1" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr unsigned int</type>
        <definition>constexpr unsigned int manif::LieGroupBase&lt; _Derived &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>The size of the underlying vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="327" column="26" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="327" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1a0ef0052589be75ef70ca7770cf73def7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class _NewScalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="structmanif_1_1_lie_group_base" kindref="compound">LieGroupBase</ref>&lt; _Derived &gt;::template LieGroupTemplate&lt; _NewScalar &gt;</type>
        <definition>LieGroupBase&lt;_Derived&gt;::template LieGroupTemplate&lt;_NewScalar&gt; manif::LieGroupBase&lt; _Derived &gt;::cast</definition>
        <argsstring>() const</argsstring>
        <name>cast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="417" column="14" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="417" bodyend="422"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1a34a63b85f977cb40012be342f902404a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>LieGroup</type>
        <definition>LieGroupBase&lt; _Derived &gt;::LieGroup manif::LieGroupBase&lt; _Derived &gt;::Identity</definition>
        <argsstring>()</argsstring>
        <name>Identity</name>
        <briefdescription>
<para>Static helper to create a Lie group object set at Identity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="334" column="19" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="695" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1a0c1def597571453671f7762c4e511e05" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>LieGroup</type>
        <definition>LieGroupBase&lt; _Derived &gt;::LieGroup manif::LieGroupBase&lt; _Derived &gt;::Random</definition>
        <argsstring>()</argsstring>
        <name>Random</name>
        <briefdescription>
<para>Static helper to create a random object of the Lie group. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="336" column="19" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="703" bodyend="706"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1a7ce9db9ccb753dbe014d050fad09c385" prot="protected" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type>_Derived &amp;</type>
        <definition>_Derived&amp; manif::LieGroupBase&lt; _Derived &gt;::derived</definition>
        <argsstring>() &amp;noexcept</argsstring>
        <name>derived</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="340" column="19" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="340" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="structmanif_1_1_lie_group_base_1a9380b9ee1ed9bbdcf3dcf284571f6901" prot="protected" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type>const _Derived &amp;</type>
        <definition>const _Derived&amp; manif::LieGroupBase&lt; _Derived &gt;::derived</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>derived</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="341" column="25" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="341" bodyend="341"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for Lie groups. Defines the minimum common API. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structmanif_1_1_tangent_base" kindref="compound">TangentBase</ref>. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="23">
        <label>Eigen::Map&lt; manif::SE3&lt; _Scalar &gt;, 0 &gt;</label>
        <link refid="class_eigen_1_1_map_3_01manif_1_1_s_e3_3_01___scalar_01_4_00_010_01_4"/>
        <childnode refid="22" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>Eigen::Map&lt; const manif::SE3&lt; _Scalar &gt;, 0 &gt;</label>
        <link refid="class_eigen_1_1_map_3_01const_01manif_1_1_s_e3_3_01___scalar_01_4_00_010_01_4"/>
        <childnode refid="20" relation="public-inheritance">
        </childnode>
      </node>
      <node id="54">
        <label>manif::SE_2_3Base&lt; _Derived &gt;</label>
        <link refid="structmanif_1_1_s_e__2__3_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="28">
        <label>manif::SE_2_3Base&lt; Map&lt; manif::SE_2_3&lt; _Scalar &gt;, 0 &gt; &gt;</label>
        <link refid="structmanif_1_1_s_e__2__3_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>Eigen::Map&lt; manif::SE2&lt; _Scalar &gt;, 0 &gt;</label>
        <link refid="class_eigen_1_1_map_3_01manif_1_1_s_e2_3_01___scalar_01_4_00_010_01_4"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>manif::SE2&lt; _Scalar &gt;</label>
        <link refid="structmanif_1_1_s_e2"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="39">
        <label>manif::SO2&lt; _Scalar &gt;</label>
        <link refid="structmanif_1_1_s_o2"/>
        <childnode refid="38" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>manif::SE_2_3&lt; _Scalar &gt;</label>
        <link refid="structmanif_1_1_s_e__2__3"/>
        <childnode refid="26" relation="public-inheritance">
        </childnode>
      </node>
      <node id="33">
        <label>Eigen::Map&lt; const manif::SGal3&lt; _Scalar &gt;, 0 &gt;</label>
        <link refid="class_eigen_1_1_map_3_01const_01manif_1_1_s_gal3_3_01___scalar_01_4_00_010_01_4"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</label>
        <link refid="class_eigen_1_1_map_3_01const_01manif_1_1_bundle_3_01___scalar_00_01_t_8_8_8_01_4_00_010_01_4"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="44">
        <label>manif::SO3Base&lt; Map&lt; const manif::SO3&lt; _Scalar &gt;, 0 &gt; &gt;</label>
        <link refid="structmanif_1_1_s_o3_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="46">
        <label>manif::SO3Base&lt; SO3&lt; _Scalar &gt; &gt;</label>
        <link refid="structmanif_1_1_s_o3_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="32">
        <label>manif::SGal3Base&lt; Map&lt; const manif::SGal3&lt; _Scalar &gt;, 0 &gt; &gt;</label>
        <link refid="structmanif_1_1_s_gal3_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="49">
        <label>Eigen::Map&lt; manif::SO3&lt; _Scalar &gt;, 0 &gt;</label>
        <link refid="class_eigen_1_1_map_3_01manif_1_1_s_o3_3_01___scalar_01_4_00_010_01_4"/>
        <childnode refid="48" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>manif::RnBase&lt; Map&lt; const manif::Rn&lt; _Scalar, _N &gt;, 0 &gt; &gt;</label>
        <link refid="structmanif_1_1_rn_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="38">
        <label>manif::SO2Base&lt; SO2&lt; _Scalar &gt; &gt;</label>
        <link refid="structmanif_1_1_s_o2_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="40">
        <label>manif::SO2Base&lt; Map&lt; manif::SO2&lt; _Scalar &gt;, 0 &gt; &gt;</label>
        <link refid="structmanif_1_1_s_o2_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="41">
        <label>Eigen::Map&lt; manif::SO2&lt; _Scalar &gt;, 0 &gt;</label>
        <link refid="class_eigen_1_1_map_3_01manif_1_1_s_o2_3_01___scalar_01_4_00_010_01_4"/>
        <childnode refid="40" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>manif::SE3Base&lt; SE3&lt; _Scalar &gt; &gt;</label>
        <link refid="structmanif_1_1_s_e3_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>Eigen::Map&lt; const manif::SE2&lt; _Scalar &gt;, 0 &gt;</label>
        <link refid="class_eigen_1_1_map_3_01const_01manif_1_1_s_e2_3_01___scalar_01_4_00_010_01_4"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>manif::SE2Base&lt; Map&lt; const manif::SE2&lt; _Scalar &gt;, 0 &gt; &gt;</label>
        <link refid="structmanif_1_1_s_e2_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>manif::SE3&lt; _Scalar &gt;</label>
        <link refid="structmanif_1_1_s_e3"/>
        <childnode refid="24" relation="public-inheritance">
        </childnode>
      </node>
      <node id="47">
        <label>manif::SO3&lt; _Scalar &gt;</label>
        <link refid="structmanif_1_1_s_o3"/>
        <childnode refid="46" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>manif::Bundle&lt; _Scalar, _T &gt;</label>
        <link refid="structmanif_1_1_bundle"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="42">
        <label>manif::SO2Base&lt; Map&lt; const manif::SO2&lt; _Scalar &gt;, 0 &gt; &gt;</label>
        <link refid="structmanif_1_1_s_o2_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>manif::Rn&lt; _Scalar, _N &gt;</label>
        <link refid="structmanif_1_1_rn"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>manif::SE2Base&lt; SE2&lt; _Scalar &gt; &gt;</label>
        <link refid="structmanif_1_1_s_e2_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>Eigen::Map&lt; manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</label>
        <link refid="class_eigen_1_1_map_3_01manif_1_1_bundle_3_01___scalar_00_01_t_8_8_8_01_4_00_010_01_4"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="55">
        <label>manif::SGal3Base&lt; _Derived &gt;</label>
        <link refid="structmanif_1_1_s_gal3_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31">
        <label>Eigen::Map&lt; const manif::SE_2_3&lt; _Scalar &gt;, 0 &gt;</label>
        <link refid="class_eigen_1_1_map_3_01const_01manif_1_1_s_e__2__3_3_01___scalar_01_4_00_010_01_4"/>
        <childnode refid="30" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>manif::BundleBase&lt; Map&lt; manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt; &gt;</label>
        <link refid="structmanif_1_1_bundle_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>manif::SE3Base&lt; Map&lt; const manif::SE3&lt; _Scalar &gt;, 0 &gt; &gt;</label>
        <link refid="structmanif_1_1_s_e3_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="57">
        <label>manif::SO3Base&lt; _Derived &gt;</label>
        <link refid="structmanif_1_1_s_o3_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>Eigen::Map&lt; manif::Rn&lt; _Scalar, _N &gt;, 0 &gt;</label>
        <link refid="class_eigen_1_1_map_3_01manif_1_1_rn_3_01___scalar_00_01___n_01_4_00_010_01_4"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>manif::BundleBase&lt; Bundle&lt; _Scalar, _T ... &gt; &gt;</label>
        <link refid="structmanif_1_1_bundle_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>manif::SE3Base&lt; Map&lt; manif::SE3&lt; _Scalar &gt;, 0 &gt; &gt;</label>
        <link refid="structmanif_1_1_s_e3_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="56">
        <label>manif::SO2Base&lt; _Derived &gt;</label>
        <link refid="structmanif_1_1_s_o2_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="53">
        <label>manif::SE3Base&lt; _Derived &gt;</label>
        <link refid="structmanif_1_1_s_e3_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>Eigen::Map&lt; const manif::Rn&lt; _Scalar, _N &gt;, 0 &gt;</label>
        <link refid="class_eigen_1_1_map_3_01const_01manif_1_1_rn_3_01___scalar_00_01___n_01_4_00_010_01_4"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="52">
        <label>manif::SE2Base&lt; _Derived &gt;</label>
        <link refid="structmanif_1_1_s_e2_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="34">
        <label>manif::SGal3Base&lt; SGal3&lt; _Scalar &gt; &gt;</label>
        <link refid="structmanif_1_1_s_gal3_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>manif::SE2Base&lt; Map&lt; manif::SE2&lt; _Scalar &gt;, 0 &gt; &gt;</label>
        <link refid="structmanif_1_1_s_e2_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="37">
        <label>Eigen::Map&lt; manif::SGal3&lt; _Scalar &gt;, 0 &gt;</label>
        <link refid="class_eigen_1_1_map_3_01manif_1_1_s_gal3_3_01___scalar_01_4_00_010_01_4"/>
        <childnode refid="36" relation="public-inheritance">
        </childnode>
      </node>
      <node id="45">
        <label>Eigen::Map&lt; const manif::SO3&lt; _Scalar &gt;, 0 &gt;</label>
        <link refid="class_eigen_1_1_map_3_01const_01manif_1_1_s_o3_3_01___scalar_01_4_00_010_01_4"/>
        <childnode refid="44" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>manif::BundleBase&lt; Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt; &gt;</label>
        <link refid="structmanif_1_1_bundle_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="35">
        <label>manif::SGal3&lt; _Scalar &gt;</label>
        <link refid="structmanif_1_1_s_gal3"/>
        <childnode refid="34" relation="public-inheritance">
        </childnode>
      </node>
      <node id="51">
        <label>manif::RnBase&lt; _Derived &gt;</label>
        <link refid="structmanif_1_1_rn_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30">
        <label>manif::SE_2_3Base&lt; Map&lt; const manif::SE_2_3&lt; _Scalar &gt;, 0 &gt; &gt;</label>
        <link refid="structmanif_1_1_s_e__2__3_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="26">
        <label>manif::SE_2_3Base&lt; SE_2_3&lt; _Scalar &gt; &gt;</label>
        <link refid="structmanif_1_1_s_e__2__3_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>manif::RnBase&lt; Rn&lt; _Scalar, _N &gt; &gt;</label>
        <link refid="structmanif_1_1_rn_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="48">
        <label>manif::SO3Base&lt; Map&lt; manif::SO3&lt; _Scalar &gt;, 0 &gt; &gt;</label>
        <link refid="structmanif_1_1_s_o3_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>manif::RnBase&lt; Map&lt; manif::Rn&lt; _Scalar, _N &gt;, 0 &gt; &gt;</label>
        <link refid="structmanif_1_1_rn_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>manif::LieGroupBase&lt; _Derived &gt;</label>
        <link refid="structmanif_1_1_lie_group_base"/>
      </node>
      <node id="50">
        <label>manif::BundleBase&lt; _Derived &gt;</label>
        <link refid="structmanif_1_1_bundle_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="29">
        <label>Eigen::Map&lt; manif::SE_2_3&lt; _Scalar &gt;, 0 &gt;</label>
        <link refid="class_eigen_1_1_map_3_01manif_1_1_s_e__2__3_3_01___scalar_01_4_00_010_01_4"/>
        <childnode refid="28" relation="public-inheritance">
        </childnode>
      </node>
      <node id="36">
        <label>manif::SGal3Base&lt; Map&lt; manif::SGal3&lt; _Scalar &gt;, 0 &gt; &gt;</label>
        <link refid="structmanif_1_1_s_gal3_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="43">
        <label>Eigen::Map&lt; const manif::SO2&lt; _Scalar &gt;, 0 &gt;</label>
        <link refid="class_eigen_1_1_map_3_01const_01manif_1_1_s_o2_3_01___scalar_01_4_00_010_01_4"/>
        <childnode refid="42" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" line="23" column="1" bodyfile="/home/runner/work/manif/manif/include/manif/impl/lie_group_base.h" bodystart="24" bodyend="342"/>
    <listofallmembers>
      <member refid="structmanif_1_1_lie_group_base_1a7fe44175f7ad70476c640d4745d7c6c9" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>_</name></member>
      <member refid="structmanif_1_1_lie_group_base_1adc60eaf39fd497125f94e7b437f5d86f" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>act</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a7eee19e807f43489efd4601a8727e9a7" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>adj</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a7351c9a0e8fe51c72978626efa12d97c" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>between</name></member>
      <member refid="structmanif_1_1_lie_group_base_1ad0db8fc1317d2ea0f6f210a6b274ec88" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>cast</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a0ef0052589be75ef70ca7770cf73def7" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>cast</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a1ac9dd89b140080b8b0284c8bdfb5270" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>coeffs</name></member>
      <member refid="structmanif_1_1_lie_group_base_1acee62f2ce8024b20db04c304031af85e" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>coeffs</name></member>
      <member refid="structmanif_1_1_lie_group_base_1aeb8cc8385a9e89c815c749ebfd3c7f14" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>compose</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a7d766d75afce68d88e7b83108b1bde3d" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>data</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a58250b5749c58fe57a7ecd14c4009dd0" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>data</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a59562d75de51334eab68426521a4e923" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>DataType</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a7ce9db9ccb753dbe014d050fad09c385" prot="protected" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>derived</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a9380b9ee1ed9bbdcf3dcf284571f6901" prot="protected" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>derived</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a42a00de7f4c6ae7e8a11568dfd4a43a8" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>Dim</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a613898f9799c5317567b33a1fabe726e" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>DoF</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a34a63b85f977cb40012be342f902404a" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>Identity</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a5b9c88987e97efb4ded4e1ceca236b46" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>inverse</name></member>
      <member refid="structmanif_1_1_lie_group_base_1ac4d00c4834b1415eef9fb7a14dc8f708" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>isApprox</name></member>
      <member refid="structmanif_1_1_lie_group_base_1ac02491bfe309ff4a384ca4394f153d6c" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>Jacobian</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a1f015474f257f800bcd826787b26bcfc" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>LieGroup</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a536b5307a15fd40b0e5eb87c0344d6a8" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>LieGroupTemplate</name></member>
      <member refid="structmanif_1_1_lie_group_base_1ae6ff30b30fc54178a527e1190a38ce3d" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>lift</name></member>
      <member refid="structmanif_1_1_lie_group_base_1aef8d336d81a657e541e5ff48e5a08b1c" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>lminus</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a27c13e0e833debe4c1b28a1dee828032" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>log</name></member>
      <member refid="structmanif_1_1_lie_group_base_1ad6af777d6c8914c59ce88a76db6f4775" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>lplus</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a3912f9ef389576c9038ce2d544b4b833" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>minus</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a4e49d3cf3538e03ff7d19c1602da19cc" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>operator*</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a019031c758bfb21a7030cd97843d4b4d" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>operator*=</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a1a497184154ab95cc4cc4d14eb07c513" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>operator+</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a2a3e11651c59644d8f5f3705d0b257de" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>operator+=</name></member>
      <member refid="structmanif_1_1_lie_group_base_1af59dd9dc829de8f8f49ecf4bee27fedd" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>operator-</name></member>
      <member refid="structmanif_1_1_lie_group_base_1ac411dc1b8a4456a3bae4afd152abddaa" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>operator=</name></member>
      <member refid="structmanif_1_1_lie_group_base_1ab3b5b3153e4d50982f9f71d104c8c37f" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>operator=</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a2b270c001e289786a499d76d886a5869" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>operator=</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a5d68ac830a6191abb32eccc874612bef" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>operator==</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a7eb3084333fc8887e2fca17484eb8b81" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>operator[]</name></member>
      <member refid="structmanif_1_1_lie_group_base_1ad6e624bd8270cec712a65f215d361b92" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>operator[]</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a9e323b97f09981a2b0d1973f8d81b21b" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>OptJacobianRef</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a74d5760f793fbfdeec248b34b3360d1c" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>plus</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a0c1def597571453671f7762c4e511e05" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>Random</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a229272dd86ff795a11848855b7072b20" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>RepSize</name></member>
      <member refid="structmanif_1_1_lie_group_base_1ad6c5f9dc430ca6b0ff1eb5cc58c9faed" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>rminus</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a2a36d6106e38cd7fac46510e6458a119" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>rplus</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a7215753f62eaeced0a3c8f53147938e3" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>Scalar</name></member>
      <member refid="structmanif_1_1_lie_group_base_1aa154961cb80b013d3d1d66132e487f33" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>setIdentity</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a3d9dc0ea239fa48ca9d75d11e08e020d" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>setRandom</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a87b9295ceffbca507f4a056a20260fc1" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>size</name></member>
      <member refid="structmanif_1_1_lie_group_base_1ab920e7e67b4e174ad7e291cd10945827" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>Tangent</name></member>
      <member refid="structmanif_1_1_lie_group_base_1aefcb523771afb5c59a70fb2d869598eb" prot="public" virt="non-virtual"><scope>manif::LieGroupBase</scope><name>Vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
