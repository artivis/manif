name: build-and-test
on:
  push:
    branches:
      - devel
      - master
  pull_request:
    branches:
      - devel
  workflow_dispatch:

env:
  CTEST_OUTPUT_ON_FAILURE: 1

jobs:

  build-ubuntu:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-16.04, ubuntu-18.04, ubuntu-20.04]
        compiler: [{
          "cc": "gcc",
          "cxx": "g++"
         }, {
          "cc": "clang",
          "cxx": "clang++"
        }]
    env:
      CC: ${{ matrix.compiler.cc }}
      CXX: ${{ matrix.compiler.cxx }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup
        run: |
          sudo apt update
          sudo apt install -y libeigen3-dev
          mkdir ${{runner.workspace}}/build
      - name: Display config
        run: |
          echo "OS:" && $RUNNER_OS && echo ""
          echo "Compiler:" && $CC && $CXX && echo ""
          echo "Eigen:" && apt-cache policy libeigen3-dev | grep Installed
      - name: Configure
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DBUILD_EXAMPLES=ON -DBUILD_TESTING=ON
      - name: Build
        working-directory: ${{runner.workspace}}/build
        run: make -j2
      - name: Test
        working-directory: ${{runner.workspace}}/build
        run: make test

  build-mac:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Xcode 10.3 & Xcode 12.2
        # removing macos-11.0 for now, see
        #https://github.com/actions/virtual-environments/issues/841
        os: [macos-10.15]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Xcode
        if: matrix.os == 'macOS-10.15'
        run: sudo xcode-select -s /Applications/Xcode_10.3.app/Contents/Developer
      - name: Setup
        run: |
          brew install eigen
          mkdir ${{runner.workspace}}/build
      - name: Display config
        run: |
          echo "OS:" && $RUNNER_OS && echo ""
          echo "Compiler:" && clang -v && echo ""
          echo "Eigen:" && brew info eigen
      - name: Configure CMake
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DBUILD_EXAMPLES=ON -DBUILD_TESTING=ON
      - name: Build
        working-directory: ${{runner.workspace}}/build
        run: make -j2
      - name: Test
        working-directory: ${{runner.workspace}}/build
        run: make test

  build-win:
    runs-on: ${{ matrix.combinations.os }}
    strategy:
      matrix:
        combinations: [{
          "os": "windows-2016",
          "cmake_generator": "Visual Studio 15 2017"
         }, {
          "os": "windows-2019",
          "cmake_generator": "Visual Studio 16 2019"
        }]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup
        run: |
          vcpkg install eigen3:x64-windows
          cd ${{runner.workspace}}
          mkdir build
      - name: Display config
        shell: bash
        run: |
          echo "OS:" && $RUNNER_OS && echo ""
          echo "Eigen:" && vcpkg list
      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -G"${{ matrix.combinations.cmake_generator }}" -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake -DBUILD_EXAMPLES=ON -DBUILD_TESTING=ON
      - name: Build
        working-directory: ${{runner.workspace}}/build
        run: cmake --build . --config Release
      - name: Test
        working-directory: ${{runner.workspace}}/build
        run: ctest . -C Release

  cppcheck:
    needs: [build-ubuntu]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup
        run: |
          sudo apt update
          sudo apt install -y libceres-dev cppcheck
          mkdir ${{runner.workspace}}/build
      - name: Configure CMake
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DENABLE_CPPCHECK=ON -DBUILD_EXAMPLES=ON -DBUILD_TESTING=ON
      - name: Build
        working-directory: ${{runner.workspace}}/build
        run: make -j2
      - name: Test
        working-directory: ${{runner.workspace}}/build
        run: make run-cppcheck

  valgrind:
    needs: [build-ubuntu]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup
        run: |
          sudo apt update
          sudo apt install -y libceres-dev valgrind
          mkdir ${{runner.workspace}}/build
      - name: Configure CMake
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DENABLE_VALGRIND=ON -DBUILD_TESTING=ON
      - name: Build
        working-directory: ${{runner.workspace}}/build
        run: make -j2
      - name: Test
        working-directory: ${{runner.workspace}}/build
        run: ctest -T memcheck

  codecov:
    needs: [build-ubuntu]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup
        run: |
          sudo apt update
          sudo apt install -y libceres-dev
          mkdir ${{runner.workspace}}/build
      - name: Configure CMake
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DENABLE_COVERAGE=ON -DBUILD_TESTING=ON
      - name: Build
        working-directory: ${{runner.workspace}}/build
        run: make -j2
      - name: Test
        working-directory: ${{runner.workspace}}/build
        run: make test
      - name: Upload coverage
        working-directory: ${{runner.workspace}}/build
        run: bash <(curl -s https://codecov.io/bash) -R $GITHUB_WORKSPACE

  ceres:
    needs: [build-ubuntu]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup
        run: |
          sudo apt update
          sudo apt install -y libceres-dev
          mkdir ${{runner.workspace}}/build
      - name: Configure CMake
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DBUILD_TESTING=ON
      - name: Build
        working-directory: ${{runner.workspace}}/build
        run: make -j2
      - name: Test
        working-directory: ${{runner.workspace}}/build
        run: make test

  pybind11:
    needs: [build-ubuntu, build-mac]
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest] #windows-latest,
        # python-version: [3.5, 3.6, 3.7, 3.8]
        python-version: [3.6]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup apt
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y libeigen3-dev
      - name: Setup brew
        if: runner.os == 'macOS'
        run: brew install eigen
      - name: Setup
        run: |
          python -m pip install --upgrade pip
          pip install pytest "pybind11[global]"
          pip install -r requirements.txt
      - name: Build
        run: pip install .
      - name: Test
        run: pytest

  # arm64:
  #   needs: [build-ubuntu]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Setup
  #       run: mkdir ${{runner.workspace}}/build
  #     - name: Configure CMake
  #       working-directory: ${{runner.workspace}}/build
  #       run: cmake $GITHUB_WORKSPACE -DENABLE_COVERAGE=ON -DBUILD_TESTING=ON
  #     - name: Build
  #       working-directory: ${{runner.workspace}}/build
  #       run: make
  #     - name: Test
  #       working-directory: ${{runner.workspace}}/build
  #       run: make test
